{"ast":null,"code":"var _jsxFileName = \"/Users/christineannfrancisco/Documents/repos/bill-splitter/bill-splitter-3/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Form from './components/Form';\nimport MainTable from './components/MainTable';\nimport CalculateTotals from './components/Calculations/CalculateTotals';\nimport FinalTotals from './components/FinalTotals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EXAMPLE_SUSHI_PERSIONS = new Set();\nconst EXAMPLE_EXPENSES = [{\n  id: '00001',\n  name: 'sushi',\n  cost: 4.23,\n  persons: EXAMPLE_SUSHI_PERSIONS,\n  each_person_cost: 0\n}];\nconst EXAMPLE_PERSONS = [{\n  id: '00010',\n  name: 'Christine'\n}];\n\n//future note: can make items and persons maps that can get updated every add person or add expense handler\n//this would need to update eery time there's a new item or new person added to the list\n\nconst App = () => {\n  _s();\n  const [expenses, setExpenses] = useState(EXAMPLE_EXPENSES);\n  const [persons, setPersons] = useState(EXAMPLE_PERSONS);\n  const [tax, setTax] = useState(0);\n  const [tip, setTip] = useState(0);\n  const addExpenseHandler = expense => {\n    setExpenses(prevExpenses => {\n      return [expense, ...prevExpenses];\n    });\n  };\n  const addPersonHandler = person => {\n    setPersons(prevPersons => {\n      return [person, ...prevPersons];\n    });\n  };\n  const addTipHandler = newTip => {\n    setTip(newTip);\n  };\n  const addTaxHandler = newTax => {\n    setTax(newTax);\n  };\n  const updateItemEaten = (item, person) => {\n    let newExpenses = expenses.slice();\n    //if it was just newExpenses = expenses, this would just be a reference to the value existing in expenses\n    //this would count as mutating the data of the state which is a nono in react\n    //this isn't seen as a change in the data \n    //by adding the .slice() method, you create a shallow copy of the data, which is then seen as a change in data\n\n    for (let i = 0; i < newExpenses.length; i++) {\n      let currentItem = newExpenses[i];\n      if (currentItem.id === item) {\n        currentItem.persons.has(person) ? currentItem.persons.delete(person) : currentItem.persons.add(person);\n      }\n    }\n    setExpenses(newExpenses);\n  };\n  const updateItemCost = (item, newCost) => {\n    let newExpenses = expenses.slice();\n    for (let i = 0; i < newExpenses.length; i++) {\n      let currentItem = newExpenses[i];\n      if (currentItem.id === item) {\n        currentItem.each_person_cost = newCost;\n      }\n      console.log(currentItem);\n    }\n    setExpenses(newExpenses);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      addExpense: addExpenseHandler,\n      addPerson: addPersonHandler,\n      persons: persons,\n      addTax: addTaxHandler,\n      addTip: addTipHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainTable, {\n      expenses: expenses,\n      persons: persons,\n      updateItemEaten: updateItemEaten\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculateTotals, {\n      tip: tip,\n      tax: tax\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FinalTotals, {\n      expenses: expenses,\n      updateItemCost: updateItemCost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4gZJsusc+rk6xRI3cWCYXzydXn0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Form","MainTable","CalculateTotals","FinalTotals","jsxDEV","_jsxDEV","EXAMPLE_SUSHI_PERSIONS","Set","EXAMPLE_EXPENSES","id","name","cost","persons","each_person_cost","EXAMPLE_PERSONS","App","_s","expenses","setExpenses","setPersons","tax","setTax","tip","setTip","addExpenseHandler","expense","prevExpenses","addPersonHandler","person","prevPersons","addTipHandler","newTip","addTaxHandler","newTax","updateItemEaten","item","newExpenses","slice","i","length","currentItem","has","delete","add","updateItemCost","newCost","console","log","children","addExpense","addPerson","addTax","addTip","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/christineannfrancisco/Documents/repos/bill-splitter/bill-splitter-3/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Form from './components/Form';\nimport MainTable from './components/MainTable';\nimport CalculateTotals from './components/Calculations/CalculateTotals';\nimport FinalTotals from './components/FinalTotals'\n\nconst EXAMPLE_SUSHI_PERSIONS = new Set();\n\nconst EXAMPLE_EXPENSES = [\n  {\n    id: '00001',\n    name: 'sushi',\n    cost: 4.23,\n    persons: EXAMPLE_SUSHI_PERSIONS,\n    each_person_cost: 0\n  }\n]\n\nconst EXAMPLE_PERSONS = [\n  {\n    id: '00010',\n    name: 'Christine',\n  }\n]\n\n//future note: can make items and persons maps that can get updated every add person or add expense handler\n//this would need to update eery time there's a new item or new person added to the list\n\nconst App = () => {\n  const [expenses, setExpenses] = useState(EXAMPLE_EXPENSES)\n  const [persons, setPersons] = useState(EXAMPLE_PERSONS)\n  const [tax, setTax] = useState(0)\n  const [tip, setTip] = useState(0)\n\n  const addExpenseHandler = (expense) => {\n    setExpenses(prevExpenses => {\n      return [expense, ...prevExpenses]\n    })\n  }\n\n  const addPersonHandler = (person) => {\n    setPersons(prevPersons => {\n      return [person, ...prevPersons]\n    })\n  }\n\n  const addTipHandler = (newTip) => {\n    setTip(newTip)\n  }\n\n  const addTaxHandler = (newTax) => {\n    setTax(newTax)\n  }\n\n  const updateItemEaten = (item, person) => {\n    let newExpenses = expenses.slice()\n    //if it was just newExpenses = expenses, this would just be a reference to the value existing in expenses\n    //this would count as mutating the data of the state which is a nono in react\n    //this isn't seen as a change in the data \n    //by adding the .slice() method, you create a shallow copy of the data, which is then seen as a change in data\n\n    for (let i  = 0; i < newExpenses.length; i++) {\n      let currentItem = newExpenses[i]\n      if (currentItem.id === item) {\n        currentItem.persons.has( person ) ? \n          currentItem.persons.delete( person ) :\n          currentItem.persons.add( person )\n      }\n    }\n\n    setExpenses(newExpenses)\n  }\n\n  const updateItemCost = (item, newCost) => {\n    let newExpenses = expenses.slice()\n    for (let i = 0; i < newExpenses.length; i++) {\n      let currentItem = newExpenses[i]\n      if (currentItem.id === item) {\n        currentItem.each_person_cost = newCost\n      }\n      console.log(currentItem)\n    }\n    setExpenses(newExpenses)\n  }\n\n  return (\n    <div>\n      <Form \n        addExpense={addExpenseHandler}\n        addPerson={addPersonHandler}\n        persons={persons}\n        addTax={addTaxHandler}\n        addTip={addTipHandler}\n      />\n      <MainTable \n        expenses={expenses} \n        persons={persons}\n        updateItemEaten={updateItemEaten}\n      />\n      <CalculateTotals\n        tip={tip}\n        tax={tax}\n      />\n      <FinalTotals\n        expenses={expenses} \n        updateItemCost={updateItemCost}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}